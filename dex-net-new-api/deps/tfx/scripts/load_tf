#!/usr/bin/env python

# Copyright 2015 Ben Kehoe
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import roslib
roslib.load_manifest('tfx')
import rospy
import tf
from optparse import OptionParser
from tfx.tb_angles import *
from tfx.tf_io import *
from tfx.canonical import *
import sys

__version__ = '0.1'

if __name__ == '__main__':
	parser = OptionParser('%prog [options] [FILE]: load a transform from a file (tf.yaml) by default')
	
	parser.add_option('-1','--once',action='store_true',default=False)
	parser.add_option('--stamp',action='store_true',default=False,help='publish with stamp from file')
	parser.add_option('--generate-example',action='store_true',default=False,help='Generate example_tf.yaml to see file format')
	parser.add_option('-v','--version',action='store_true',default=False)
	
	(options,args) = parser.parse_args(args=rospy.myargv()[1:])
	
	if options.version:
		print __version__
		sys.exit(0)
	
	if options.generate_example:
		ret = dump_example()
		sys.exit(ret)
	
	rospy.init_node('load_tf',anonymous=True)
	
	frames_from_to = None
	if len(args) >= 2:
		frames_from_to = (args[0],args[1])
		if len(args) > 2:
			filename = args[2]
		else:
			filename = 'tf.yaml'
	elif len(args) > 0:
		filename = args[0]
	else:
		filename = 'tf.yaml'
	
	print 'loading from %s...' % filename
	
	
	tf_file_data = TfFileData()
	tf_file_data.load(filename,tf_frames_from_to=frames_from_to,use_stamp=options.stamp,pose_frame_default_to_tf_parent=True)
	
	T = tf_file_data.tf.transform
	pos = get_tf_translation_tuple(T)
	q = get_tf_quaternion_tuple(T)
	print 'sending transform %s %s...' % (pos,q)
	
	while not rospy.is_shutdown():
		br = tf.TransformBroadcaster()
		br.sendTransform(pos,q,rospy.Time.now(),tf_file_data.tf.to_frame,tf_file_data.tf.from_frame)

		if options.once:
			break
		rospy.sleep(0.1)

	print "done"
