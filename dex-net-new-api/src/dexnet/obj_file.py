import logging
import os
import sys

import IPython

import mesh

class ObjFile:
    '''
    A MeshFile holds a Mesh in one of various file formats
    '''
    def __init__(self, filepath):
        '''
        Set the path to the file to open
        '''
        self.filepath_ = filepath
        file_root, file_ext = os.path.splitext(self.filepath_)
        if file_ext != '.obj':
            print 'Extension', file_ext
            raise Exception('Cannot load file extension %s. Please supply a .obj file' %(file_ext))

    def get_filepath(self):
        '''
        Returns the path to the file to read / write
        '''
        return self.filepath_

    def read(self):
        '''
        Read in the vertex, normal, and face lists to form a mesh.
        Technically this should also read in a texture but right now we don't support it
        '''
        numVerts = 0  
        verts = []
        norms = None
        faces = []
        tex_coords = []
        face_norms = []
        f = open(self.filepath_, 'r')

        for line in f:  
            # break up the line by whitespace
            vals = line.split()  
            if len(vals) > 0:
                # look for obj tags (see http://en.wikipedia.org/wiki/Wavefront_.obj_file)
                if vals[0] == 'v':  
                    # add vertex
                    v = map(float, vals[1:4])  
                    verts.append(v)  
                if vals[0] == 'vn':  
                    # add normal
                    if norms is None:
                        norms = []
                    n = map(float, vals[1:4])  
                    norms.append(n)  
                if vals[0] == 'f':
                    # add faces (includes vertex indices, texture coordinates, and normals)
                    vi = []
                    vti = []
                    nti = []
                    if vals[1].find('/') == -1:
                        vi = map(int, vals[1:])
                        vi = [i - 1 for i in vi]
                    else:
                        for j in range(1, len(vals)):
                            # break up like by / to read vert inds, tex coords, and normal inds
                            val = vals[j]
                            tokens = val.split('/')
                            for i in range(len(tokens)):
                                if i == 0:
                                    vi.append(int(tokens[i]) - 1) # adjust for python 0 - indexing
                                elif i == 1:
                                    if tokens[i] != '':
                                        vti.append(int(tokens[i]))
                                elif i == 2:
                                    nti.append(int(tokens[i]))
                    faces.append(vi)
                    # below two lists are currently not in use
                    tex_coords.append(vti)
                    face_norms.append(nti)

        return mesh.Mesh3D(verts, faces, norms)

    def write(self, mesh):
        '''
        Write a mesh to an obj file.
        Assumes mesh vertices, faces, and normals are in standard python list objects.
        Does not support material files or texture coordinates
        '''
        f = open(self.filepath_, 'w')
        vertices = mesh.vertices()
        faces = mesh.triangles()
        normals = mesh.normals()
        colors = mesh.colors()

        # write human-readable header
        f.write('###########################################################\n')
        f.write('# OBJ file generated by UC Berkeley Automation Sciences Lab\n')
        f.write('#\n')
        f.write('# Num Vertices: %d\n' %(len(vertices)))
        f.write('# Num Triangles: %d\n' %(len(faces)))
        f.write('#\n')
        f.write('###########################################################\n')
        f.write('\n')

        if colors is None:
            # write the vertex list
            for v in vertices:
                f.write('v %f %f %f\n' %(v[0], v[1], v[2]))
        else:
            assert len(vertices) == colors.shape[0], 'Color dimension mismatch'
            for v, c in zip(vertices, colors):
                f.write('v %f %f %f %f %f %f\n' %(v[0], v[1], v[2], c[0], c[1], c[2]))

        # write the normals list
        if normals is not None and len(normals) > 0:
            for n in normals:
                f.write('vn %f %f %f\n' %(n[0], n[1], n[2]))

        # write the normals list
        for t in faces:
            f.write('f %d %d %d\n' %(t[0]+1, t[1]+1, t[2]+1)) # convert back to 1-indexing

        f.close()

        logging.info('Wrote mesh to %s', self.filepath_)

if __name__ == '__main__':
    test_file = sys.argv[1]
    of = ObjFile(test_file)
    m = of.read()

    oof = ObjFile('test.obj')
    oof.write(m)
